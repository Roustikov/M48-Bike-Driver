;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12.04.2014
;Author  : MakZ
;Company :
;Comments:
;
;
;Chip type               : ATmega48V
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <mega48.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $00000009 VOL: 0
	#endif
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;#include <delay.h>
;#include <sleep.h>
;#define MIN 2
;#define MAX 130
;#define MAX_MODE 3
;#define DELAY 20
;#define PULSE_BOTTOM_DELAY 0
;#define PULSE_TOP_DELAY 0
;#define STROBE_DELAY 100
;#define INT_DELAY 300
;#define CONTROL_PIN PIND.2
;#define OUTPUT_PIN PIND.5
;#define PWM_REGISTER OCR0B
;
;int EARLY_PWM_STATE = 0;
;
;enum mode
;{
;    pulse,
;    full,
;    cop_light,
;    off,
;    strobe
;}mode;
;
;void pulse_wait()
; 0000 0032 {

	.CSEG
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0033     if(PWM_REGISTER < 10)
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0034         delay_ms(DELAY);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0035 
; 0000 0036     if(PWM_REGISTER < 8)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0037         delay_ms(DELAY);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0038 
; 0000 0039     if(PWM_REGISTER < 6)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 003A         delay_ms(DELAY);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003B 
; 0000 003C     if(PWM_REGISTER < 5)
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 003D         delay_ms(DELAY);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003E 
; 0000 003F     if(PWM_REGISTER < 4)
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0040         delay_ms(DELAY);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0041 
; 0000 0042     if(PWM_REGISTER < 3)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0043         delay_ms(DELAY);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0044 
; 0000 0045     if(PWM_REGISTER < 2)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0046         delay_ms(DELAY);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0047 }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;void pulse_mode()
; 0000 004A {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004B     PWM_REGISTER = MIN;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004C     OUTPUT_PIN = 1;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 004D 
; 0000 004E     while(PWM_REGISTER != MAX && mode == pulse)
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004F     {
; 0000 0050         PWM_REGISTER++;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0051         delay_ms(DELAY);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0052         //pulse_wait();
; 0000 0053 
; 0000 0054         if(PWM_REGISTER==MAX)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0055             delay_ms(PULSE_TOP_DELAY); //top
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0056     }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0057 
; 0000 0058     while(PWM_REGISTER != MIN && mode == pulse)
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0059     {
; 0000 005A         PWM_REGISTER--;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 005B         delay_ms(DELAY);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 005C         //pulse_wait();
; 0000 005D 
; 0000 005E         if(PWM_REGISTER==MIN)
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 005F             delay_ms(PULSE_BOTTOM_DELAY); //bottom
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0060     }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0061 }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;
;void full_mode()
; 0000 0064 {
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0065     OUTPUT_PIN = 1;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0066     PWM_REGISTER = 255;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0067 }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;
;void off_mode()
; 0000 006A {
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 006B     OUTPUT_PIN = 0;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 006C     PWM_REGISTER = 0;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 006D     delay_ms(50);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 006E     sleep_enable();
;PCODE: $0000008E VOL: 0
; 0000 006F     powerdown();
;PCODE: $0000008F VOL: 0
; 0000 0070 }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;
;void strobe_mode(int delay)
; 0000 0073 {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0074     EARLY_PWM_STATE = PWM_REGISTER;
;PCODE: $00000094 VOL: 0
;	delay -> Y+0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0075 
; 0000 0076     PWM_REGISTER = 255;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0077     delay_ms(delay);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0078     PWM_REGISTER = 0;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0079     delay_ms(delay);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 007A 
; 0000 007B     PWM_REGISTER = EARLY_PWM_STATE;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 007C }
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;
;void cop_light_mode()
; 0000 007F {
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0080     int i=0;
; 0000 0081     PWM_REGISTER = 0;
;PCODE: $000000A7 VOL: 0
;	i -> R16,R17
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0082     for(i=0; i<7; i++)
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0083     {
; 0000 0084         if(mode == cop_light)
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0085             strobe_mode(STROBE_DELAY*0.6);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0086         else
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0087             return;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0088     }
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0089 
; 0000 008A     if(mode == cop_light)
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 008B         delay_ms(300);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 008C     if(mode == cop_light)
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 008D         delay_ms(300);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 008E     if(mode == cop_light)
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 008F         delay_ms(300);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0090 }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;
;void mode_switch()
; 0000 0093 {
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0094     mode++;
;PCODE: $000000DC VOL: 0
; 0000 0095     if(mode > MAX_MODE)
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0096     {
; 0000 0097         mode = pulse;
;PCODE: $000000E0 VOL: 0
; 0000 0098     }
; 0000 0099 }
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 009D {
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 009E     delay_ms(INT_DELAY);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 009F 
; 0000 00A0     if(CONTROL_PIN == 0)
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00A1     {
; 0000 00A2         while(CONTROL_PIN == 0)
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00A3         {
; 0000 00A4             strobe_mode(STROBE_DELAY);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00A5         }
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00A6     }
; 0000 00A7     else
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00A8     {
; 0000 00A9         mode_switch();
;PCODE: $000000F6 VOL: 0
; 0000 00AA     }
;PCODE: $000000F7 VOL: 0
; 0000 00AB }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 00B0 {
;PCODE: $000000FB VOL: 0
; 0000 00B1     // Declare your local variables here
; 0000 00B2 
; 0000 00B3     // Crystal Oscillator division factor: 0
; 0000 00B4     #pragma optsize-
; 0000 00B5     CLKPR=0x80;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00B6     CLKPR=0x00;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00B7     #ifdef _OPTIMIZE_SIZE_
; 0000 00B8     #pragma optsize+
; 0000 00B9     #endif
; 0000 00BA 
; 0000 00BB     // Input/Output Ports initialization
; 0000 00BC     // Port B initialization
; 0000 00BD     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00BE     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00BF     PORTB=0x00;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00C0     DDRB=0x00;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00C1 
; 0000 00C2     // Port C initialization
; 0000 00C3     // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00C4     // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00C5     PORTC=0x00;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00C6     DDRC=0x00;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00C7 
; 0000 00C8     // Port D initialization
; 0000 00C9     // Func7=In Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00CA     // State7=T State6=T State5=0 State4=T State3=T State2=P State1=T State0=T
; 0000 00CB     PORTD=0x04;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00CC     DDRD=0x20;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00CD 
; 0000 00CE     // Timer/Counter 0 initialization
; 0000 00CF     // Clock source: System Clock
; 0000 00D0     // Clock value: 39,063 kHz
; 0000 00D1     // Mode: Phase correct PWM top=0xFF
; 0000 00D2     // OC0A output: Disconnected
; 0000 00D3     // OC0B output: Non-Inverted PWM
; 0000 00D4     TCCR0A=0x21;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00D5     TCCR0B=0x04;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00D6     TCNT0=0x00;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00D7     OCR0A=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00D8     OCR0B=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00D9 
; 0000 00DA     // Timer/Counter 1 initialization
; 0000 00DB     // Clock source: System Clock
; 0000 00DC     // Clock value: Timer1 Stopped
; 0000 00DD     // Mode: Normal top=0xFFFF
; 0000 00DE     // OC1A output: Discon.
; 0000 00DF     // OC1B output: Discon.
; 0000 00E0     // Noise Canceler: Off
; 0000 00E1     // Input Capture on Falling Edge
; 0000 00E2     // Timer1 Overflow Interrupt: Off
; 0000 00E3     // Input Capture Interrupt: Off
; 0000 00E4     // Compare A Match Interrupt: Off
; 0000 00E5     // Compare B Match Interrupt: Off
; 0000 00E6     TCCR1A=0x00;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00E7     TCCR1B=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00E8     TCNT1H=0x00;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00E9     TCNT1L=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00EA     ICR1H=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00EB     ICR1L=0x00;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00EC     OCR1AH=0x00;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00ED     OCR1AL=0x00;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00EE     OCR1BH=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00EF     OCR1BL=0x00;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00F0 
; 0000 00F1     // Timer/Counter 2 initialization
; 0000 00F2     // Clock source: System Clock
; 0000 00F3     // Clock value: Timer2 Stopped
; 0000 00F4     // Mode: Normal top=0xFF
; 0000 00F5     // OC2A output: Disconnected
; 0000 00F6     // OC2B output: Disconnected
; 0000 00F7     ASSR=0x00;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00F8     TCCR2A=0x00;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00F9     TCCR2B=0x00;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00FA     TCNT2=0x00;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00FB     OCR2A=0x00;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00FC     OCR2B=0x00;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00FD 
; 0000 00FE     // External Interrupt(s) initialization
; 0000 00FF     // INT0: Off
; 0000 0100     // INT1: On
; 0000 0101     // INT1 Mode: Low level
; 0000 0102     // Interrupt on any change on pins PCINT0-7: Off
; 0000 0103     // Interrupt on any change on pins PCINT8-14: Off
; 0000 0104     // Interrupt on any change on pins PCINT16-23: Off
; 0000 0105     EICRA=0x00;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0106     EIMSK=0x02;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0107     EIFR=0x02;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0108     PCICR=0x00;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0109 
; 0000 010A     // Timer/Counter 0 Interrupt(s) initialization
; 0000 010B     TIMSK0=0x00;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 010C 
; 0000 010D     // Timer/Counter 1 Interrupt(s) initialization
; 0000 010E     TIMSK1=0x00;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 010F 
; 0000 0110     // Timer/Counter 2 Interrupt(s) initialization
; 0000 0111     TIMSK2=0x00;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0112 
; 0000 0113     // USART initialization
; 0000 0114     // USART disabled
; 0000 0115     UCSR0B=0x00;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0116 
; 0000 0117     // Analog Comparator initialization
; 0000 0118     // Analog Comparator: Off
; 0000 0119     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 011A     ACSR=0x80;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 011B     ADCSRB=0x00;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 011C     DIDR1=0x00;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 011D 
; 0000 011E     // ADC initialization
; 0000 011F     // ADC disabled
; 0000 0120     ADCSRA=0x00;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0121 
; 0000 0122     // SPI initialization
; 0000 0123     // SPI disabled
; 0000 0124     SPCR=0x00;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0125 
; 0000 0126     // TWI initialization
; 0000 0127     // TWI disabled
; 0000 0128     TWCR=0x00;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0129 
; 0000 012A     // Global enable interrupts
; 0000 012B     #asm("sei")
;PCODE: $00000152 VOL: 0
	sei
;PCODE: $00000153 VOL: 0
; 0000 012C 
; 0000 012D     while (1)
;PCODE: $00000154 VOL: 0
; 0000 012E     {
; 0000 012F         while(mode == pulse)
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0130         {
; 0000 0131             pulse_mode();
;PCODE: $00000158 VOL: 0
; 0000 0132         }
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0133 
; 0000 0134         while(mode == full)
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0135         {
; 0000 0136             full_mode();
;PCODE: $0000015F VOL: 0
; 0000 0137         }
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0138 
; 0000 0139         while(mode == cop_light)
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 013A         {
; 0000 013B             cop_light_mode();
;PCODE: $00000166 VOL: 0
; 0000 013C         }
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 013D 
; 0000 013E         while(mode == strobe)
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 013F         {
; 0000 0140             strobe_mode(STROBE_DELAY);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0141         }
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0142 
; 0000 0143         while(mode == off)
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0144         {
; 0000 0145             off_mode();
;PCODE: $00000176 VOL: 0
; 0000 0146         }
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0147     }
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0148 }
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
