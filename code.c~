/*****************************************************
This program was produced by the
CodeWizardAVR V2.05.3 Standard
Automatic Program Generator
© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 12.04.2014
Author  : MakZ
Company : 
Comments: 


Chip type               : ATmega48V
AVR Core Clock frequency: 8,000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 128
*****************************************************/

#include <mega48.h>
#include <delay.h>
#include <sleep.h>
#define MIN 2
#define MAX 130
#define MAX_MODE 3
#define DELAY 20
#define PULSE_BOTTOM_DELAY 0
#define PULSE_TOP_DELAY 0
#define STROBE_DELAY 100
#define INT_DELAY 300
#define CONTROL_PIN PIND.2
#define OUTPUT_PIN PIND.5
#define PWM_REGISTER OCR0B

int EARLY_PWM_STATE = 0;

enum mode
{
    pulse,
    full,
    cop_light,
    off,
    strobe
}mode;

void pulse_wait()
{            
    if(PWM_REGISTER < 10)
        delay_ms(DELAY);
    
    if(PWM_REGISTER < 8)
        delay_ms(DELAY);  
    
    if(PWM_REGISTER < 6)
        delay_ms(DELAY);
            
    if(PWM_REGISTER < 5)
        delay_ms(DELAY);   
    
    if(PWM_REGISTER < 4)
        delay_ms(DELAY);
                
    if(PWM_REGISTER < 3)
        delay_ms(DELAY);
        
    if(PWM_REGISTER < 2)
        delay_ms(DELAY);   
}

void pulse_mode()
{
    PWM_REGISTER = MIN;
    OUTPUT_PIN = 1;  
    
    while(PWM_REGISTER != MAX && mode == pulse)
    {
        PWM_REGISTER++;
        delay_ms(DELAY);
        //pulse_wait();                                   
        
        if(PWM_REGISTER==MAX)
            delay_ms(PULSE_TOP_DELAY); //top
    }
    
    while(PWM_REGISTER != MIN && mode == pulse)
    {
        PWM_REGISTER--;
        delay_ms(DELAY);    
        //pulse_wait();

        if(PWM_REGISTER==MIN)
            delay_ms(PULSE_BOTTOM_DELAY); //bottom     
    }
}

void full_mode()
{
    OUTPUT_PIN = 1;
    PWM_REGISTER = 255;
}

void off_mode()
{   
    OUTPUT_PIN = 0;
    PWM_REGISTER = 0;
    delay_ms(50); 
    sleep_enable();
    powerdown();
}

void strobe_mode(int delay)
{
    EARLY_PWM_STATE = PWM_REGISTER;
    
    PWM_REGISTER = 255;
    delay_ms(delay);
    PWM_REGISTER = 0;
    delay_ms(delay);
    
    PWM_REGISTER = EARLY_PWM_STATE;
}

void cop_light_mode()
{
    int i=0;
    PWM_REGISTER = 0;
    for(i=0; i<7; i++)
    {        
        if(mode == cop_light)
            strobe_mode(STROBE_DELAY*0.6);
        else
            return;
    }
    
    if(mode == cop_light)
        delay_ms(300);
    if(mode == cop_light)
        delay_ms(300);
    if(mode == cop_light)
        delay_ms(300);
}

void mode_switch()
{
    mode++;
    if(mode > MAX_MODE)
    {
        mode = pulse;
    }
}

// External Interrupt 0 service routine
interrupt [EXT_INT1] void ext_int1_isr(void)
{
    delay_ms(INT_DELAY);

    if(CONTROL_PIN == 0)
    {
        while(CONTROL_PIN == 0)
        {
            strobe_mode(STROBE_DELAY);
        }
    }
    else
    {
        mode_switch();
    }
}

// Declare your global variables here

void main(void)
{
    // Declare your local variables here

    // Crystal Oscillator division factor: 0
    #pragma optsize-
    CLKPR=0x80;
    CLKPR=0x00;
    #ifdef _OPTIMIZE_SIZE_
    #pragma optsize+
    #endif

    // Input/Output Ports initialization
    // Port B initialization
    // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
    // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
    PORTB=0x00;
    DDRB=0x00;

    // Port C initialization
    // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
    // State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
    PORTC=0x00;
    DDRC=0x00;

    // Port D initialization
    // Func7=In Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In 
    // State7=T State6=T State5=0 State4=T State3=T State2=P State1=T State0=T 
    PORTD=0x04;
    DDRD=0x20;

    // Timer/Counter 0 initialization
    // Clock source: System Clock
    // Clock value: 39,063 kHz
    // Mode: Phase correct PWM top=0xFF
    // OC0A output: Disconnected
    // OC0B output: Non-Inverted PWM
    TCCR0A=0x21;
    TCCR0B=0x04;
    TCNT0=0x00;
    OCR0A=0x00;
    OCR0B=0x00;

    // Timer/Counter 1 initialization
    // Clock source: System Clock
    // Clock value: Timer1 Stopped
    // Mode: Normal top=0xFFFF
    // OC1A output: Discon.
    // OC1B output: Discon.
    // Noise Canceler: Off
    // Input Capture on Falling Edge
    // Timer1 Overflow Interrupt: Off
    // Input Capture Interrupt: Off
    // Compare A Match Interrupt: Off
    // Compare B Match Interrupt: Off
    TCCR1A=0x00;
    TCCR1B=0x00;
    TCNT1H=0x00;
    TCNT1L=0x00;
    ICR1H=0x00;
    ICR1L=0x00;
    OCR1AH=0x00;
    OCR1AL=0x00;
    OCR1BH=0x00;
    OCR1BL=0x00;

    // Timer/Counter 2 initialization
    // Clock source: System Clock
    // Clock value: Timer2 Stopped
    // Mode: Normal top=0xFF
    // OC2A output: Disconnected
    // OC2B output: Disconnected
    ASSR=0x00;
    TCCR2A=0x00;
    TCCR2B=0x00;
    TCNT2=0x00;
    OCR2A=0x00;
    OCR2B=0x00;

    // External Interrupt(s) initialization
    // INT0: Off
    // INT1: On
    // INT1 Mode: Low level
    // Interrupt on any change on pins PCINT0-7: Off
    // Interrupt on any change on pins PCINT8-14: Off
    // Interrupt on any change on pins PCINT16-23: Off
    EICRA=0x00;
    EIMSK=0x02;
    EIFR=0x02;
    PCICR=0x00;

    // Timer/Counter 0 Interrupt(s) initialization
    TIMSK0=0x00;

    // Timer/Counter 1 Interrupt(s) initialization
    TIMSK1=0x00;

    // Timer/Counter 2 Interrupt(s) initialization
    TIMSK2=0x00;

    // USART initialization
    // USART disabled
    UCSR0B=0x00;

    // Analog Comparator initialization
    // Analog Comparator: Off
    // Analog Comparator Input Capture by Timer/Counter 1: Off
    ACSR=0x80;
    ADCSRB=0x00;
    DIDR1=0x00;

    // ADC initialization
    // ADC disabled
    ADCSRA=0x00;

    // SPI initialization
    // SPI disabled
    SPCR=0x00;

    // TWI initialization
    // TWI disabled
    TWCR=0x00;

    // Global enable interrupts
    #asm("sei")
     
    while (1)
    {
        while(mode == pulse)
        {
            pulse_mode();
        }
        
        while(mode == full)
        {
            full_mode();
        }
        
        while(mode == cop_light)
        {
            cop_light_mode();
        }
        
        while(mode == strobe)
        {
            strobe_mode(STROBE_DELAY);    
        }  
        
        while(mode == off)
        {
            off_mode();
        }
    }
}